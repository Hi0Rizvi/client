#!/bin/bash
set -eu

mux2dev_db="openvpn/configs/mux2dev.txt"

usage () {
    cat <<-EOF
usage: $0 status|up mux|down mux

status      Show the status of configured OpenVPN tunnels.

up mux      Bring tunnel to mux up.

down mux    Bring tunnel to mux down.

EOF
    exit 0
}

mux_status_check() {
    mux=$1
    if [ -z "${mux2dev[$mux]}" ] ; then
        echo "error [mux $mux unknown]"
        echo "try killing OpenVPN instances and cleaning openvpn/logs/"
        exit 1
    fi
    dev=${mux2dev[$mux]}
    pidfn="openvpn/logs/$dev.pid"
    if [ ! -s $pidfn ] ; then
        echo "down"
        return
    fi
    if ! kill -0 $(cat $pidfn) &> /dev/null ; then
        echo "error [$pidfn exists but cannot send signal]"
        echo "try killing OpenVPN instances and cleaning openvpn/logs/"
        exit 1
    fi
    statfn="openvpn/logs/$dev.status"
    if [ ! -s $statfn ] ; then
        echo "error [$pidfn exists but $statfn missing]"
        echo "try killing OpenVPN instances and cleaning openvpn/logs/"
        return
    fi
    head -n 1 $statfn | cut -d " " -f 1,2
}

if [ ! -s $mux2dev_db ] ; then echo "$mux2dev_db not found" ; exit 1 ; fi
declare -A mux2dev
while read mux dev ; do
    mux2dev[$mux]=$dev
done < $mux2dev_db

if [ $# -lt 1 ] ; then usage ; fi
case $1 in
up)
    if [ $# -lt 2 ] ; then usage ; fi
    mux=$2
    mstat=$(mux_status_check $mux)
    if [[ $mstat =~ ^up.*$ ]] ; then echo "tunnel $mux already up" ; exit 0 ; fi
    openvpn --cd $(pwd)/openvpn --config configs/$mux.conf
    ;;
down)
    if [ $# -lt 2 ] ; then usage ; fi
    mux=$2
    mstat=$(mux_status_check $mux)
    if [[ $mstat =~ ^down$ ]] ; then echo "tunnel $mux already down" ; exit 0 ; fi
    dev=${mux2dev[$mux]}
    kill $(cat openvpn/logs/$dev.pid)
    ;;
status)
    for mux in ${!mux2dev[@]} ; do
        echo "$mux ${mux2dev[$mux]} $(mux_status_check $mux)"
    done | sort
    ;;
*)
    usage
    ;;
esac
